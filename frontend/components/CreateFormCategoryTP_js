import React, { Component } from 'react';
import { Mutation, Query, ApolloConsumer } from 'react-apollo';
import gql from 'graphql-tag';
import PropTypes from 'prop-types';
import {
  Radio,
  Header,
  Segment,
  Button,
  Checkbox,
  Icon,
  Table,
  Form,
} from 'semantic-ui-react';
import styled from 'styled-components';
import NProgress from 'nprogress';
// import CategoryTaxPayers, { ALL_CATEGORYTAXPAYERS_QUERY} from '../CategoryTaxPayers';
// import { ALL_CATEGORYTAXPAYERS_QUERY } from '../CategoryTaxPayers';
// import CategoryTaxPayers from '../CategoryTaxPayers';
// import Error from './ErrorMessage';

const RowDiv = styled.div`
  /* margin: 52px 0px;
  padding: 30px 10px;
  border: 1px solid rgba(34, 36, 38, 0.15);
  border-radius: 0.28571429rem;
  box-shadow: 0 1px 2px 0 rgba(34, 36, 38, 0.15);
  .menu-account-info {
    font-family: 'Montserrat Alternates', 'Roboto', 'Open Sans', sans-serif,
      'Arial';
  } */
  .segment.segment-bottom {
    display: flex;
    justify-content: flex-end;
  }
`;

const FormTab = styled.div`
  /* .ui.bottom.attached.segment > form { */
  form {
    > div.inline.fields.radio-buttons {
      /* margin: 0 0 1em; */
      border: 1px solid rgba(34, 36, 38, 0.15);
      padding: 1em 1em;
    }
    /* div.radio-buttons {
      padding: 10px 0;
    } */
    div.fields.form-group-submit {
      /* display: none; */
      display: ${props => props.submitShow};
    }
    div.fields.form-group-edit {
      /* display: flex; */
      display: ${props => props.editShow};
    }
  }
`;

const ALL_CATEGORYTAXPAYERS_QUERY = gql`
  query ALL_CATEGORYTAXPAYERS_QUERY {
    categoryTaxPayers(orderBy: category_ASC) {
      id
      category
      categoryID
      taxRegime
      taxRegimeID
      isActive
    }
  }
`;

const CREATE_CATEGORYTAXPAYER_MUTATION = gql`
  mutation CREATE_CATEGORYTAXPAYER_MUTATION(
    $category: String!
    $categoryID: String!
    $taxRegime: String!
    $taxRegimeID: String!
  ) {
    createCategoryTaxPayer(
      category: $category
      categoryID: $categoryID
      taxRegime: $taxRegime
      taxRegimeID: $taxRegimeID
    ) {
      id
      category
      categoryID
      taxRegime
      taxRegimeID
      isActive
    }
  }
`;

class CreateFormCategoryTP extends Component {
  // static propTypes = {
  //   categoryTaxPayer: PropTypes.shape({
  //     id: PropTypes.string,
  //     category: PropTypes.string,
  //     categoryID: PropTypes.string,
  //     taxRegime: PropTypes.string,
  //     taxRegimeID: PropTypes.string,
  //     isActive: PropTypes.bool,
  //   }).isRequired,
  // };

  state = {
    // categoryTP: this.props.categoryTP,
    categoryTP: {
      category: '',
      categoryID: '',
      taxRegime: '',
      taxRegimeID: '',
      isActive: true,
      // isActive: undefined,
    },
    // loadingQuery: false,
    showCreate: '',
  };
  // const {
  //   // currentCategoryTP,
  //   categoryTaxPayer,
  //   loadingUpdate,
  //   handleChange,
  //   showEdit,
  //   updateCategoryTP,
  //   enableEdit,
  //   updateCategoryTaxPayer,
  // } = props;

  createCategoryTP = async (e, createCategoryTaxPayer) => {
    e.preventDefault();
    // console.log('createCategoryTP e: ', e);
    // console.log('createCategoryTP this.state: ', this.state);
    const { categoryTP } = this.state;
    const res = await createCategoryTaxPayer({
      variables: { ...categoryTP },
    });
    console.log('createCategoryTaxPayer CREATED!!!!');
    this.setState({
      categoryTP: {
        category: '',
        categoryID: '',
        taxRegime: '',
        taxRegimeID: '',
        isActive: true,
      },
      showCreate: '',
    });
  };

  handleChange = (e, data) => {
    const { name, type, value } = e.target;
    console.log(`handleChange: e: `, e);
    console.log(`handleChange: data: `, data);
    // console.log(
    //   `AddFORM handleChange: name: ${name}, type: ${type}, value: ${value}, data.checked: ${
    //     data.checked
    //   }, data.name: ${data.name}`
    // );
    console.log(
      `AddFORM handleChange: name: ${name}, type: ${type}, value: ${value}`
    );

    let val = value;
    const nam = name;

    // if (data.name === 'isActive') {
    //   val = data.checked;
    //   nam = data.name;
    // }
    if (name === 'isActive' && value === 'true') {
      val = true;
    } else if (name === 'isActive' && value === 'false') {
      val = false;
    }

    const { categoryTP } = this.state;
    categoryTP[nam] = val;
    this.setState({ categoryTP });
  };

  showCreateForm = val => {
    console.log('CreateFormCategoryTP showCreateForm');
    if (val === '1') {
      this.setState({
        showCreate: '1',
      });
    } else {
      this.setState({
        showCreate: '',
        categoryTP: {
          category: '',
          categoryID: '',
          taxRegime: '',
          taxRegimeID: '',
          isActive: true,
        },
      });
    }
  };

  render() {
    console.log('CreateFormCategoryTP render -> props', this.props);
    console.log('CreateFormCategoryTP render -> state', this.state);
    const { categoryTP, showCreate } = this.state;
    console.log('CreateFormCategoryTP render -> categoryTaxPayer', categoryTP);
    return (
      <Mutation
        mutation={CREATE_CATEGORYTAXPAYER_MUTATION}
        variables={categoryTP}
        refetchQueries={() => ['ALL_CATEGORYTAXPAYERS_QUERY']}
      >
        {(
          createCategoryTaxPayer,
          { loading: loadingCreate, error: errorCreate }
        ) => (
          <RowDiv>
            {showCreate === '1' && (
              <FormTab>
                <Form
                  onSubmit={e =>
                    this.createCategoryTP(e, createCategoryTaxPayer)
                  }
                  loading={loadingCreate}
                  // error={<Error error={error} />}
                  error
                >
                  <Form.Group>
                    <Form.Input
                      fluid
                      label="ID Категория налогоплательщика"
                      name="categoryID"
                      loading={loadingCreate}
                      value={categoryTP.categoryID}
                      onChange={this.handleChange}
                      width={8}
                      required
                    />
                    <Form.Input
                      fluid
                      label="Категория налогоплательщика"
                      // id="name"
                      name="category"
                      // disabled={loadingCreate}
                      loading={loadingCreate}
                      width={16}
                      required
                      // defaultValue={profileTP.name || ''}
                      value={categoryTP.category}
                      onChange={this.handleChange}
                      // error={{
                      //   content: 'Это поле обязательно должно быть заполнено!',
                      //   pointing: 'below',
                      // }}
                    />
                  </Form.Group>
                  <Form.Group>
                    <Form.Input
                      fluid
                      label="ID Режим налогообложения"
                      name="taxRegimeID"
                      loading={loadingCreate}
                      value={categoryTP.taxRegimeID}
                      onChange={this.handleChange}
                      width={8}
                    />
                    <Form.Input
                      fluid
                      label="Режим налогообложения"
                      name="taxRegime"
                      loading={loadingCreate}
                      value={categoryTP.taxRegime}
                      onChange={this.handleChange}
                      width={16}
                    />
                  </Form.Group>

                  <Form.Group inline className="radio-buttons" width={16}>
                    <label>Статус</label>

                    <Form.Radio
                      control="input"
                      type="radio"
                      label="Активен"
                      name="isActive"
                      value="true"
                      checked={categoryTP.isActive === true}
                      onChange={this.handleChange}
                      // id="status"
                    />
                    <Form.Radio
                      control="input"
                      type="radio"
                      label="Неактивен"
                      name="isActive"
                      value="false"
                      checked={categoryTP.isActive === false}
                      onChange={this.handleChange}
                      // id="status"
                    />
                  </Form.Group>
                  <Form.Group className="form-group-submit">
                    <Form.Field
                      id="form-button-submit"
                      inline
                      control={Button}
                      content={loadingCreate ? 'Создать' : 'Создание'}
                      label="Отправить запрос на создание категории"
                    />
                  </Form.Group>
                </Form>
              </FormTab>
            )}
            <Segment className="segment-bottom">
              {showCreate === '1' && (
                <Button
                  floated="right"
                  icon
                  labelPosition="left"
                  // primary
                  size="large"
                  onClick={() => this.showCreateForm('')}
                >
                  <Icon name="x" /> Отмена
                </Button>
              )}
              {showCreate === '' && (
                <Button
                  floated="right"
                  icon
                  labelPosition="left"
                  // primary
                  // size="large"
                  onClick={() => this.showCreateForm('1')}
                >
                  <Icon name="plus circle" /> Добавить категорию
                </Button>
              )}
            </Segment>
          </RowDiv>
        )}
      </Mutation>
    );
  }
}

export default CreateFormCategoryTP;
