{"version":3,"file":"static/webpack/static/development/pages/post.js.e4641eaf41ed51f1c94c.hot-update.js","sources":["webpack:///./components/Post.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Mutation, Query, ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport { Header, Segment, Button, Icon, Form,\n} from 'semantic-ui-react';\nimport styled from 'styled-components';\n//import NProgress from 'nprogress';\n//import CreateFormCategoryTP from './CreateFormCategoryTP';\nimport { ALL_POSTS_QUERY } from './PostList';\n// import Error from './ErrorMessage';\n\nconst RowDiv = styled.div`\n  margin: 52px 0px;\n  padding: 30px 10px;\n  border: 1px solid rgba(34, 36, 38, 0.15);\n  border-radius: 0.28571429rem;\n  box-shadow: 0 1px 2px 0 rgba(34, 36, 38, 0.15);\n  .menu-account-info {\n    font-family: 'Montserrat Alternates', 'Roboto', 'Open Sans', sans-serif,\n      'Arial';\n  }\n  .segment.segment-bottom {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst FormTab = styled.div`\n  form {\n    > div.inline.fields.radio-buttons {\n      /* margin: 0 0 1em; */\n      border: 1px solid rgba(34, 36, 38, 0.15);\n      padding: 1em 1em;\n    }\n    /* div.radio-buttons {\n      padding: 10px 0;\n    } */\n    div.fields.form-group-submit {\n      /* display: none; */\n      display: ${props => props.submitShow};\n    }\n    div.fields.form-group-edit {\n      /* display: flex; */\n      display: ${props => props.editShow};\n    }\n  }\n`;\n\nconst POST_QUERY = gql`\n  query POST_QUERY(\n    $id: String!\n  ) {\n    post(id: $id) {\n      id\n      title\n      userId\n      content\n      createdDate\n    }\n  }\n`;\n\nconst CREATE_POST_MUTATION = gql`\n  mutation CREATE_POST_MUTATION(\n    $userId: String!\n    $title: String!\n    $content: String!\n  ) {\n    createPost(\n      userId: $userId\n      title: $title\n      content: $content\n      ) {\n        id\n        title\n        userId\n        content\n        createdDate\n    }\n  }\n`;\n\nconst UPDATE_POST_MUTATION = gql`\n  mutation UPDATE_POST_MUTATION(\n    $userId: String!\n    $postId: String!\n    $title: String!\n    $content: String!\n  ) {\n    updatePost(\n      userId: $userId\n      postId: $postId\n      title: $title\n      content: $content\n      ) {\n        id\n        title\n        userId\n        content\n        createdDate\n    }\n  }\n`;\n\nconst ItemsList = styled.div`\n  /* display: grid; */\n  display: block;\n  /* grid-template-columns: 1fr 1fr;\n  grid-gap: 60px; */\n  max-width: ${props => props.theme.maxWidth};\n  margin: 2.5rem 3rem;\n  padding: 0 4em;\n  @media (max-width: 700px) {\n    margin: 2.5rem 1rem;\n  }\n`;\n\n// const Post = props => (\n//   <Query query={ALL_POSTS_QUERY}>\n//     {({ data: { posts }, loading: loadingQuery }) => {\n//       console.log('query PostList posts: ', posts);\n//       if (loadingQuery)\n//         return (\n//           <div>\n//             <p>Загрузка...</p>\n//             <Icon loading name=\"spinner\" />\n//           </div>\n//         );\n//       if (!posts) {\n//         return <p>Постов нет</p>;\n//       }\n//       // console.log('const PostList: props:', props);\n//       return (\n//         <RowDiv>\n//           <div>\n//             <Segment.Group>\n//               <Segment>\n//               <ItemsList>\n//                 {data.posts.map(post => (\n//                   <PostBlock postItem={postItem} key={post.id} />\n//                 ))}\n//               </ItemsList>\n//                 <CreateFormCategoryTP />\n//               </Segment>\n//             </Segment.Group>\n//           </div>\n//         </RowDiv>\n//       );\n//     }}\n//   </Query>\n// );\n\nconst Post = props => {\n  console.log('const Post props: ', props);\n  return (\n  <Query query={POST_QUERY}\n    variables={{\n          id: props.id,\n        }}\n  >\n    {({ data, loading: loadingQuery }) => {\n      console.log('query Post data: ', data);\n      return (\n      loadingQuery ? (\n          <div>\n            <p>\n            Загрузка...\n            <i className=\"spinner icon\"></i>\n            {/* <Icon loading name=\"spinner\" /> */}\n            </p>\n          </div>\n        )\n        :\n        (\n          <RowDiv>\n          <div>\n            <Segment.Group>\n              <Segment>\n\n                  <PostBlock postItem={data.post} key={data.post.id} />\n\n                {/* <CreateFormCategoryTP /> */}\n              </Segment>\n            </Segment.Group>\n          </div>\n        </RowDiv>\n        )\n      );\n    }}\n  </Query>\n  )};\n\nclass PostBlock extends Component {\n  static propTypes = {\n    postItem: PropTypes.shape({\n      id: PropTypes.string,\n      userId: PropTypes.string,\n      title: PropTypes.string,\n      content: PropTypes.string,\n      createdDate: PropTypes.string,\n    }).isRequired,\n  };\n\n  state = {\n    postItem: this.props.postItem,\n    // showCreate: '',\n    readOnly: true,\n    showEdit: '',\n  };\n\n  enableEdit = val => {\n    console.log('PostBlock enableEdit');\n    if (val === '1') {\n      this.setState({\n        showEdit: '1',\n        readOnly: false,\n      });\n    } else {\n      this.setState({\n        showEdit: '',\n        readOnly: true,\n        postItem: this.props.postItem,\n      });\n    }\n  };\n\n  handleChange = (e, data) => {\n    const { name, type, value } = e.target;\n    // console.log(`handleChange: e: `, e);\n    console.log(`handleChange: data: `, data);\n    console.log(\n      `handleChange: name: ${name}, type: ${type}, value: ${value}, data.checked: ${\n        data.checked\n      }, data.name: ${data.name}`\n    );\n\n    let val = value;\n    let nam = name;\n\n    if (data.name === 'isActive') {\n      val = data.checked;\n      nam = data.name;\n    }\n\n    const { postItem } = this.state;\n    postItem[nam] = val;\n    this.setState({ postItem });\n  };\n\n  updatePostItem = async updatePost => {\n    // console.log('updatePostItem e: ', e);\n    // console.log('PostList updatePostItem this.state: ', this.state);\n    const { postItem } = this.state;\n    console.log(\n      'PostList updatePostItem this.state.postItem: ',\n      postItem\n    );\n    const res = await updatePost({\n      variables: {\n        userId: postItem.userId,\n        postId: postItem.id,\n        title: postItem.title,\n        content: postItem.content,\n      },\n      });\n    console.log('updatePostItem UPDATED!!!! res: ', res);\n    this.setState({\n      postItem: this.props.postItem,\n      // postItem: {\n      //   userId:\n      //   title: '',\n      //   content: '',\n      //   createdDate: '',\n      // },\n      showEdit: '',\n      readOnly: true,\n    });\n  };\n\n  render() {\n    console.log('PostBlock render -> props', this.props);\n    console.log('PostBlock render -> state', this.state);\n    const {\n      postItem,\n      // showCreate,\n      readOnly,\n      showEdit,\n    } = this.state;\n    console.log('PostBlock render -> state.postItem', postItem);\n    return (\n      <Mutation\n        mutation={UPDATE_POST_MUTATION}\n        variables={{\n          userId: postItem.userId,\n          postId: postItem.id,\n          title: postItem.title,\n          content: postItem.content,\n        }}\n        refetchQueries={() => ['ALL_POSTS_QUERY']}\n      >\n        {(\n          updatePost, { loading: loadingUpdate, error: errorUpdate }\n        ) => {\n            if (errorUpdate) return (<Message negative>\n              <Message.Header>Ошибка!</Message.Header>\n              <p>{errorUpdate}</p>\n            </Message>);\n            return (\n            <Segment>\n            <div>\n            <h2>\n              <Form.Input\n                fluid\n                name=\"title\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                defaultValue={postItem.title}\n                onChange={this.handleChange}\n                // width={required\n              />\n              </h2>\n            <p>{postItem.userId}</p>\n              {/* <Form.Input\n                fluid\n                name=\"userId\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                // defaultValue={postItem.userId}\n                // value={readOnly ? postItem.userId : categoryTP.userId}\n                defaultValue={postItem.userId}\n                onChange={this.handleChange}\n                // width={8}\n                required\n              /> */}\n              <p>{postItem.createdDate}</p>\n              {/* <Form.Input\n                fluid\n                name=\"createdDate\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                defaultValue={postItem.createdDate}\n                onChange={this.handleChange}\n                // width={8}\n                required\n              /> */}\n            </div>\n            <div>\n              <Form.Input\n                fluid\n                name=\"content\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                defaultValue={postItem.content}\n                onChange={this.handleChange}\n                // width={8}\n                required\n              />\n            </div>\n\n            {showEdit === '' ? (\n              <Segment>\n                <Button\n                  // TODO tooltip\n                  icon\n                  size=\"large\"\n                  onClick={() => this.enableEdit('1')}\n                >\n                  <Icon name=\"edit outline\" />\n                </Button>\n                <Button icon size=\"large\">\n                  <Icon name=\"trash alternate outline\" />\n                </Button>\n              </Segment>\n            ) : (\n              <Segment>\n                <Button\n                  onClick={() => this.updatePostItem(updatePost)}\n                  >\n                  Обнов{loadingUpdate ? 'ление' : 'ить'}\n                </Button>\n                <Button onClick={() => this.enableEdit('')}>Отмена</Button>\n              </Segment>\n            )}\n          </Segment>\n            );\n        }}\n      </Mutation>\n    );\n  }\n}\n\nexport default Post;"],"mappings":"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","sourceRoot":""}