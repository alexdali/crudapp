{"version":3,"file":"static/webpack/static/development/pages/index.js.7fed6be138fc5fec8661.hot-update.js","sources":["webpack:///./components/PostList.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Mutation, Query, ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport { Item, Header, Segment, Button, Icon, Form } from 'semantic-ui-react';\nimport styled from 'styled-components';\n//import NProgress from 'nprogress';\n//import CreateFormCategoryTP from './CreateFormCategoryTP';\nimport PostCard from './PostCard';\n// import Error from './ErrorMessage';\n\nconst RowDiv = styled.div`\n  margin: 52px 0px;\n  padding: 30px 10px;\n  /* border: 1px solid rgba(34, 36, 38, 0.15);\n  border-radius: 0.28571429rem; */\n  /* box-shadow: 0 1px 2px 0 rgba(34, 36, 38, 0.15); */\n  /* .menu-account-info {\n    font-family: 'Montserrat Alternates', 'Roboto', 'Open Sans', sans-serif,\n      'Arial';\n  }\n  .segment.segment-bottom {\n    display: flex;\n    justify-content: space-between;\n  } */\n`;\n\n// const FormTab = styled.div`\n//   form {\n//     > div.inline.fields.radio-buttons {\n//       /* margin: 0 0 1em; */\n//       border: 1px solid rgba(34, 36, 38, 0.15);\n//       padding: 1em 1em;\n//     }\n//     /* div.radio-buttons {\n//       padding: 10px 0;\n//     } */\n//     div.fields.form-group-submit {\n//       /* display: none; */\n//       display: ${props => props.submitShow};\n//     }\n//     div.fields.form-group-edit {\n//       /* display: flex; */\n//       display: ${props => props.editShow};\n//     }\n//   }\n// `;\n\nconst ItemsList = styled.div`\n  /* display: grid; */\n  display: block;\n  /* grid-template-columns: 1fr 1fr;\n  grid-gap: 60px; */\n  max-width: ${props => props.theme.maxWidth};\n  margin: 2.5rem 3rem;\n  padding: 0 4em;\n  @media (max-width: 700px) {\n    margin: 2.5rem 1rem;\n  }\n`;\n\n// const perScreen = 5;\n\nconst ALL_POSTS_QUERY = gql`\n  query ALL_POSTS_QUERY {\n    posts {\n      id\n      title\n      userId\n      content\n      createdDate\n    }\n  }\n`;\n\n// const UPDATE_POST_MUTATION = gql`\n//   mutation UPDATE_POST_MUTATION(\n//     $userId: String!\n//     $postId: String!\n//     $title: String!\n//     $content: String!\n//   ) {\n//     updatePost(\n//       userId: $userId\n//       postId: $postId\n//       title: $title\n//       content: $content)\n//       {\n//         id\n//         title\n//         userId\n//         content\n//         createdDate\n//     }\n//   }\n// `;\n\nconst PostList = props => (\n  <Query query={ALL_POSTS_QUERY}>\n    {({ data, loading: loadingQuery }) => {\n\n      return (\n      loadingQuery ? (\n          <div>\n            <p>\n            Загрузка...\n            <i className=\"spinner icon\"></i>\n            {/* <Icon loading name=\"spinner\" /> */}\n            </p>\n          </div>\n        )\n        :\n        (\n          //console.log('query PostList posts: ', posts);\n      /* (!posts) {\n        return <p>Постов нет</p>; }*/\n      // console.log('const PostList: props:', props);\n          //<RowDiv>\n          //<div>\n             //<Segment.Group>\n              // <Segment>\n\n              <Item.Group divided relaxed='very'>\n                {data.posts.map(post => (\n                  <Segment>\n                  <PostCard postcard={post} key={post.id} />\n                  </Segment>\n                ))}\n                </Item.Group>\n\n                // <CreateFormCategoryTP />\n              //</Segment>\n            // </Segment.Group>\n          //</div>\n          //</RowDiv>\n      )\n      );\n    }}\n  </Query>\n);\n\nexport { ALL_POSTS_QUERY };\nexport default PostList"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AASA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAQA;AACA;AACA;AACA;AAjCA;AAoCA;AAxCA;AACA;AA2CA;AACA;;;;A","sourceRoot":""}