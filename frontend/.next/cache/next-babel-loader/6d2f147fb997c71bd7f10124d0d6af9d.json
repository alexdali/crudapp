{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/media/n2_3TB/EDU/GraphQL/crudapp/frontend/components/Post.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Mutation, Query, ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport { Header, Segment, Button, Icon, Table, Form } from 'semantic-ui-react';\nimport styled from 'styled-components'; //import NProgress from 'nprogress';\n\nimport CreateFormCategoryTP from './CreateFormCategoryTP';\nimport { ALL_POSTS_QUERY } from './PostList'; // import Error from './ErrorMessage';\n\nconst RowDiv = styled.div.withConfig({\n  displayName: \"Post__RowDiv\",\n  componentId: \"sc-1g58j7m-0\"\n})([\"margin:52px 0px;padding:30px 10px;border:1px solid rgba(34,36,38,0.15);border-radius:0.28571429rem;box-shadow:0 1px 2px 0 rgba(34,36,38,0.15);.menu-account-info{font-family:'Montserrat Alternates','Roboto','Open Sans',sans-serif,'Arial';}.segment.segment-bottom{display:flex;justify-content:space-between;}\"]);\nconst FormTab = styled.div.withConfig({\n  displayName: \"Post__FormTab\",\n  componentId: \"sc-1g58j7m-1\"\n})([\"form{> div.inline.fields.radio-buttons{border:1px solid rgba(34,36,38,0.15);padding:1em 1em;}div.fields.form-group-submit{display:\", \";}div.fields.form-group-edit{display:\", \";}}\"], props => props.submitShow, props => props.editShow);\nconst POST_QUERY = gql`\n  query POST_QUERY(\n    $id: String!\n  ) {\n    post {\n      id\n      title\n      userId\n      content\n      createdDate\n    }\n  }\n`;\nconst CREATE_POST_MUTATION = gql`\n  mutation CREATE_POST_MUTATION(\n    $userId: String!\n    $title: String!\n    $content: String!\n  ) {\n    createPost(\n      userId: $userId\n      title: $title\n      content: $content\n      ) {\n        id\n        title\n        userId\n        content\n        createdDate\n    }\n  }\n`;\nconst UPDATE_POST_MUTATION = gql`\n  mutation UPDATE_POST_MUTATION(\n    $userId: String!\n    $postId: String!\n    $title: String!\n    $content: String!\n  ) {\n    updatePost(\n      userId: $userId\n      postId: $postId\n      title: $title\n      content: $content\n      ) {\n        id\n        title\n        userId\n        content\n        createdDate\n    }\n  }\n`; // const Post = props => (\n//   <Query query={ALL_POSTS_QUERY}>\n//     {({ data: { posts }, loading: loadingQuery }) => {\n//       console.log('query PostList posts: ', posts);\n//       if (loadingQuery)\n//         return (\n//           <div>\n//             <p>Загрузка...</p>\n//             <Icon loading name=\"spinner\" />\n//           </div>\n//         );\n//       if (!posts) {\n//         return <p>Постов нет</p>;\n//       }\n//       // console.log('const PostList: props:', props);\n//       return (\n//         <RowDiv>\n//           <div>\n//             <Segment.Group>\n//               <Segment>\n//               <ItemsList>\n//                 {data.posts.map(post => (\n//                   <PostBlock postItem={postItem} key={post.id} />\n//                 ))}\n//               </ItemsList>\n//                 <CreateFormCategoryTP />\n//               </Segment>\n//             </Segment.Group>\n//           </div>\n//         </RowDiv>\n//       );\n//     }}\n//   </Query>\n// );\n\nconst Post = props => __jsx(Query, {\n  query: POST_QUERY,\n  variables: {\n    id: props.id\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 142\n  },\n  __self: this\n}, ({\n  data,\n  loading: loadingQuery\n}) => {\n  console.log('query Post data: ', data);\n  return loadingQuery ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\", __jsx(\"i\", {\n    className: \"spinner icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }))) : __jsx(RowDiv, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, __jsx(Segment.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, __jsx(Segment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, __jsx(ItemsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, __jsx(PostBlock, {\n    postItem: data.post,\n    key: data.post.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  })), __jsx(CreateFormCategoryTP, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  })))));\n});\n\nclass PostBlock extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      postItem: this.props.postItem,\n      // showCreate: '',\n      readOnly: true,\n      showEdit: ''\n    });\n\n    _defineProperty(this, \"enableEdit\", val => {\n      console.log('PostBlock enableEdit');\n\n      if (val === '1') {\n        this.setState({\n          showEdit: '1',\n          readOnly: false\n        });\n      } else {\n        this.setState({\n          showEdit: '',\n          readOnly: true,\n          postItem: this.props.postItem\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleChange\", (e, data) => {\n      const {\n        name,\n        type,\n        value\n      } = e.target; // console.log(`handleChange: e: `, e);\n\n      console.log(`handleChange: data: `, data);\n      console.log(`handleChange: name: ${name}, type: ${type}, value: ${value}, data.checked: ${data.checked}, data.name: ${data.name}`);\n      let val = value;\n      let nam = name;\n\n      if (data.name === 'isActive') {\n        val = data.checked;\n        nam = data.name;\n      }\n\n      const {\n        postItem\n      } = this.state;\n      postItem[nam] = val;\n      this.setState({\n        postItem\n      });\n    });\n\n    _defineProperty(this, \"updatePostItem\", async updatePost => {\n      // console.log('updatePostItem e: ', e);\n      // console.log('PostList updatePostItem this.state: ', this.state);\n      const {\n        postItem\n      } = this.state;\n      console.log('PostList updatePostItem this.state.postItem: ', postItem);\n      const res = await updatePost({\n        userId: postItem.userId,\n        postId: postItem.postId,\n        title: postItem.title,\n        content: postItem.content\n      });\n      console.log('updatePostItem UPDATED!!!! res: ', res);\n      this.setState({\n        postItem: this.props.postItem,\n        // postItem: {\n        //   userId:\n        //   title: '',\n        //   content: '',\n        //   createdDate: '',\n        // },\n        showEdit: '',\n        readOnly: true\n      });\n    });\n  }\n\n  render() {\n    console.log('PostBlock render -> props', this.props);\n    console.log('PostBlock render -> state', this.state);\n    const {\n      postItem,\n      // showCreate,\n      readOnly,\n      showEdit\n    } = this.state;\n    console.log('PostBlock render -> state.postItem', postItem);\n    return __jsx(Mutation, {\n      mutation: UPDATE_POST_MUTATION,\n      variables: postItem // {postItem: this.state.postItem,categoryTaxPayerId: this.props.postItem.id,}\n      ,\n      refetchQueries: () => ['ALL_POSTS_QUERY'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, ({\n      updatePost,\n      loading: loadingUpdate,\n      error: errorUpdate\n    }) => __jsx(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, __jsx(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, __jsx(Form.Input, {\n      fluid: true,\n      name: \"title\",\n      readOnly: readOnly,\n      disabled: loadingUpdate,\n      loading: loadingUpdate,\n      defaultValue: postItem.title,\n      onChange: this.handleChange // width={required\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    })), __jsx(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, __jsx(Form.Input, {\n      fluid: true,\n      name: \"userId\",\n      readOnly: readOnly,\n      disabled: loadingUpdate,\n      loading: loadingUpdate // defaultValue={postItem.userId}\n      // value={readOnly ? postItem.userId : categoryTP.userId}\n      ,\n      defaultValue: postItem.userId,\n      onChange: this.handleChange // width={8}\n      ,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    })), __jsx(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, __jsx(Form.Input, {\n      fluid: true,\n      name: \"createdDate\",\n      readOnly: readOnly,\n      disabled: loadingUpdate,\n      loading: loadingUpdate,\n      defaultValue: postItem.createdDate,\n      onChange: this.handleChange // width={8}\n      ,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    })), __jsx(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, __jsx(Form.Input, {\n      fluid: true,\n      name: \"content\",\n      readOnly: readOnly,\n      disabled: loadingUpdate,\n      loading: loadingUpdate,\n      defaultValue: postItem.content,\n      onChange: this.handleChange // width={8}\n      ,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    })), showEdit === '' ? __jsx(Table.Cell, {\n      collapsing: true,\n      colSpan: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, __jsx(Button // TODO tooltip\n    , {\n      icon: true,\n      size: \"large\",\n      onClick: () => this.enableEdit('1'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, __jsx(Icon, {\n      name: \"edit outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    })), __jsx(Button, {\n      icon: true,\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, __jsx(Icon, {\n      name: \"trash alternate outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }))) : __jsx(Table.Cell, {\n      collapsing: true,\n      colSpan: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, __jsx(Button, {\n      onClick: () => this.updatePostItem(updatePost),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"\\u041E\\u0431\\u043D\\u043E\\u0432\", loadingUpdate ? 'ление' : 'ить'), __jsx(Button, {\n      onClick: () => this.enableEdit(''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\"))));\n  }\n\n}\n\n_defineProperty(PostBlock, \"propTypes\", {\n  postItem: PropTypes.shape({\n    id: PropTypes.string,\n    userId: PropTypes.string,\n    title: PropTypes.string,\n    content: PropTypes.string,\n    createdDate: PropTypes.string\n  }).isRequired\n});\n\nexport default Post;","map":{"version":3,"sources":["/media/n2_3TB/EDU/GraphQL/crudapp/frontend/components/Post.js"],"names":["React","Component","Mutation","Query","ApolloConsumer","gql","PropTypes","Header","Segment","Button","Icon","Table","Form","styled","CreateFormCategoryTP","ALL_POSTS_QUERY","RowDiv","div","FormTab","props","submitShow","editShow","POST_QUERY","CREATE_POST_MUTATION","UPDATE_POST_MUTATION","Post","id","data","loading","loadingQuery","console","log","post","PostBlock","postItem","readOnly","showEdit","val","setState","e","name","type","value","target","checked","nam","state","updatePost","res","userId","postId","title","content","render","loadingUpdate","error","errorUpdate","handleChange","createdDate","enableEdit","updatePostItem","shape","string","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,cAA1B,QAAgD,cAAhD;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwCC,KAAxC,EAA+CC,IAA/C,QACO,mBADP;AAEA,OAAOC,MAAP,MAAmB,mBAAnB,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAASC,eAAT,QAAgC,YAAhC,C,CACA;;AAEA,MAAMC,MAAM,GAAGH,MAAM,CAACI,GAAV;AAAA;AAAA;AAAA,0TAAZ;AAgBA,MAAMC,OAAO,GAAGL,MAAM,CAACI,GAAV;AAAA;AAAA;AAAA,2LAYIE,KAAK,IAAIA,KAAK,CAACC,UAZnB,EAgBID,KAAK,IAAIA,KAAK,CAACE,QAhBnB,CAAb;AAqBA,MAAMC,UAAU,GAAGjB,GAAI;;;;;;;;;;;;CAAvB;AAcA,MAAMkB,oBAAoB,GAAGlB,GAAI;;;;;;;;;;;;;;;;;;CAAjC;AAoBA,MAAMmB,oBAAoB,GAAGnB,GAAI;;;;;;;;;;;;;;;;;;;;CAAjC,C,CAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMoB,IAAI,GAAGN,KAAK,IAChB,MAAC,KAAD;AAAO,EAAA,KAAK,EAAEG,UAAd;AACE,EAAA,SAAS,EAAE;AACLI,IAAAA,EAAE,EAAEP,KAAK,CAACO;AADL,GADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAKG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,OAAO,EAAEC;AAAjB,CAAD,KAAqC;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,IAAjC;AACA,SACAE,YAAY,GACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAEA;AAAG,IAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADF,CADQ,GAWR,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD,CAAS,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,QAAQ,EAAEF,IAAI,CAACK,IAA1B;AAAgC,IAAA,GAAG,EAAEL,IAAI,CAACK,IAAL,CAAUN,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADA,EAIE,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CADF,CADA,CAZJ;AA0BD,CAjCH,CADF;;AAsCA,MAAMO,SAAN,SAAwBhC,SAAxB,CAAkC;AAAA;AAAA;;AAAA,mCAWxB;AACNiC,MAAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWe,QADf;AAEN;AACAC,MAAAA,QAAQ,EAAE,IAHJ;AAINC,MAAAA,QAAQ,EAAE;AAJJ,KAXwB;;AAAA,wCAkBnBC,GAAG,IAAI;AAClBP,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AACA,UAAIM,GAAG,KAAK,GAAZ,EAAiB;AACf,aAAKC,QAAL,CAAc;AACZF,UAAAA,QAAQ,EAAE,GADE;AAEZD,UAAAA,QAAQ,EAAE;AAFE,SAAd;AAID,OALD,MAKO;AACL,aAAKG,QAAL,CAAc;AACZF,UAAAA,QAAQ,EAAE,EADE;AAEZD,UAAAA,QAAQ,EAAE,IAFE;AAGZD,UAAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWe;AAHT,SAAd;AAKD;AACF,KAhC+B;;AAAA,0CAkCjB,CAACK,CAAD,EAAIZ,IAAJ,KAAa;AAC1B,YAAM;AAAEa,QAAAA,IAAF;AAAQC,QAAAA,IAAR;AAAcC,QAAAA;AAAd,UAAwBH,CAAC,CAACI,MAAhC,CAD0B,CAE1B;;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAa,sBAAb,EAAoCJ,IAApC;AACAG,MAAAA,OAAO,CAACC,GAAR,CACG,uBAAsBS,IAAK,WAAUC,IAAK,YAAWC,KAAM,mBAC1Df,IAAI,CAACiB,OACN,gBAAejB,IAAI,CAACa,IAAK,EAH5B;AAMA,UAAIH,GAAG,GAAGK,KAAV;AACA,UAAIG,GAAG,GAAGL,IAAV;;AAEA,UAAIb,IAAI,CAACa,IAAL,KAAc,UAAlB,EAA8B;AAC5BH,QAAAA,GAAG,GAAGV,IAAI,CAACiB,OAAX;AACAC,QAAAA,GAAG,GAAGlB,IAAI,CAACa,IAAX;AACD;;AAED,YAAM;AAAEN,QAAAA;AAAF,UAAe,KAAKY,KAA1B;AACAZ,MAAAA,QAAQ,CAACW,GAAD,CAAR,GAAgBR,GAAhB;AACA,WAAKC,QAAL,CAAc;AAAEJ,QAAAA;AAAF,OAAd;AACD,KAvD+B;;AAAA,4CAyDf,MAAMa,UAAN,IAAoB;AACnC;AACA;AACA,YAAM;AAAEb,QAAAA;AAAF,UAAe,KAAKY,KAA1B;AACAhB,MAAAA,OAAO,CAACC,GAAR,CACE,+CADF,EAEEG,QAFF;AAIA,YAAMc,GAAG,GAAG,MAAMD,UAAU,CAAC;AAC3BE,QAAAA,MAAM,EAAEf,QAAQ,CAACe,MADU;AAE3BC,QAAAA,MAAM,EAAEhB,QAAQ,CAACgB,MAFU;AAG3BC,QAAAA,KAAK,EAAEjB,QAAQ,CAACiB,KAHW;AAI3BC,QAAAA,OAAO,EAAElB,QAAQ,CAACkB;AAJS,OAAD,CAA5B;AAMAtB,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDiB,GAAhD;AACA,WAAKV,QAAL,CAAc;AACZJ,QAAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWe,QADT;AAEZ;AACA;AACA;AACA;AACA;AACA;AACAE,QAAAA,QAAQ,EAAE,EARE;AASZD,QAAAA,QAAQ,EAAE;AATE,OAAd;AAWD,KAnF+B;AAAA;;AAqFhCkB,EAAAA,MAAM,GAAG;AACPvB,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyC,KAAKZ,KAA9C;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyC,KAAKe,KAA9C;AACA,UAAM;AACJZ,MAAAA,QADI;AAEJ;AACAC,MAAAA,QAHI;AAIJC,MAAAA;AAJI,QAKF,KAAKU,KALT;AAMAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDG,QAAlD;AACA,WACE,MAAC,QAAD;AACE,MAAA,QAAQ,EAAEV,oBADZ;AAEE,MAAA,SAAS,EACPU,QADO,CAEP;AAJJ;AAME,MAAA,cAAc,EAAE,MAAM,CAAC,iBAAD,CANxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQG,CAAC;AACAa,MAAAA,UADA;AACYnB,MAAAA,OAAO,EAAE0B,aADrB;AACoCC,MAAAA,KAAK,EAAEC;AAD3C,KAAD,KAGC,MAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD,CAAM,KAAN;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,QAAQ,EAAErB,QAHZ;AAIE,MAAA,QAAQ,EAAEmB,aAJZ;AAKE,MAAA,OAAO,EAAEA,aALX;AAME,MAAA,YAAY,EAAEpB,QAAQ,CAACiB,KANzB;AAOE,MAAA,QAAQ,EAAE,KAAKM,YAPjB,CAQE;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAaE,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD,CAAM,KAAN;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,QAAQ,EAAEtB,QAHZ;AAIE,MAAA,QAAQ,EAAEmB,aAJZ;AAKE,MAAA,OAAO,EAAEA,aALX,CAME;AACA;AAPF;AAQE,MAAA,YAAY,EAAEpB,QAAQ,CAACe,MARzB;AASE,MAAA,QAAQ,EAAE,KAAKQ,YATjB,CAUE;AAVF;AAWE,MAAA,QAAQ,MAXV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAbF,EA4BE,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD,CAAM,KAAN;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,MAAA,QAAQ,EAAEtB,QAHZ;AAIE,MAAA,QAAQ,EAAEmB,aAJZ;AAKE,MAAA,OAAO,EAAEA,aALX;AAME,MAAA,YAAY,EAAEpB,QAAQ,CAACwB,WANzB;AAOE,MAAA,QAAQ,EAAE,KAAKD,YAPjB,CAQE;AARF;AASE,MAAA,QAAQ,MATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA5BF,EAyCE,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD,CAAM,KAAN;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,QAAQ,EAAEtB,QAHZ;AAIE,MAAA,QAAQ,EAAEmB,aAJZ;AAKE,MAAA,OAAO,EAAEA,aALX;AAME,MAAA,YAAY,EAAEpB,QAAQ,CAACkB,OANzB;AAOE,MAAA,QAAQ,EAAE,KAAKK,YAPjB,CAQE;AARF;AASE,MAAA,QAAQ,MATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAzCF,EAuDGrB,QAAQ,KAAK,EAAb,GACC,MAAC,KAAD,CAAO,IAAP;AAAY,MAAA,UAAU,MAAtB;AAAuB,MAAA,OAAO,EAAC,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD,CACE;AADF;AAEE,MAAA,IAAI,MAFN;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,OAAO,EAAE,MAAM,KAAKuB,UAAL,CAAgB,GAAhB,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF,EASE,MAAC,MAAD;AAAQ,MAAA,IAAI,MAAZ;AAAa,MAAA,IAAI,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,yBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATF,CADD,GAeC,MAAC,KAAD,CAAO,IAAP;AAAY,MAAA,UAAU,MAAtB;AAAuB,MAAA,OAAO,EAAC,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AACE,MAAA,OAAO,EAAE,MAAM,KAAKC,cAAL,CAAoBb,UAApB,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAGQO,aAAa,GAAG,OAAH,GAAa,KAHlC,CADF,EAME,MAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKK,UAAL,CAAgB,EAAhB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CANF,CAtEJ,CAXJ,CADF;AA+FD;;AA9L+B;;gBAA5B1B,S,eACe;AACjBC,EAAAA,QAAQ,EAAE5B,SAAS,CAACuD,KAAV,CAAgB;AACxBnC,IAAAA,EAAE,EAAEpB,SAAS,CAACwD,MADU;AAExBb,IAAAA,MAAM,EAAE3C,SAAS,CAACwD,MAFM;AAGxBX,IAAAA,KAAK,EAAE7C,SAAS,CAACwD,MAHO;AAIxBV,IAAAA,OAAO,EAAE9C,SAAS,CAACwD,MAJK;AAKxBJ,IAAAA,WAAW,EAAEpD,SAAS,CAACwD;AALC,GAAhB,EAMPC;AAPc,C;;AAgMrB,eAAetC,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Mutation, Query, ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport { Header, Segment, Button, Icon, Table, Form,\n} from 'semantic-ui-react';\nimport styled from 'styled-components';\n//import NProgress from 'nprogress';\nimport CreateFormCategoryTP from './CreateFormCategoryTP';\nimport { ALL_POSTS_QUERY } from './PostList';\n// import Error from './ErrorMessage';\n\nconst RowDiv = styled.div`\n  margin: 52px 0px;\n  padding: 30px 10px;\n  border: 1px solid rgba(34, 36, 38, 0.15);\n  border-radius: 0.28571429rem;\n  box-shadow: 0 1px 2px 0 rgba(34, 36, 38, 0.15);\n  .menu-account-info {\n    font-family: 'Montserrat Alternates', 'Roboto', 'Open Sans', sans-serif,\n      'Arial';\n  }\n  .segment.segment-bottom {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst FormTab = styled.div`\n  form {\n    > div.inline.fields.radio-buttons {\n      /* margin: 0 0 1em; */\n      border: 1px solid rgba(34, 36, 38, 0.15);\n      padding: 1em 1em;\n    }\n    /* div.radio-buttons {\n      padding: 10px 0;\n    } */\n    div.fields.form-group-submit {\n      /* display: none; */\n      display: ${props => props.submitShow};\n    }\n    div.fields.form-group-edit {\n      /* display: flex; */\n      display: ${props => props.editShow};\n    }\n  }\n`;\n\nconst POST_QUERY = gql`\n  query POST_QUERY(\n    $id: String!\n  ) {\n    post {\n      id\n      title\n      userId\n      content\n      createdDate\n    }\n  }\n`;\n\nconst CREATE_POST_MUTATION = gql`\n  mutation CREATE_POST_MUTATION(\n    $userId: String!\n    $title: String!\n    $content: String!\n  ) {\n    createPost(\n      userId: $userId\n      title: $title\n      content: $content\n      ) {\n        id\n        title\n        userId\n        content\n        createdDate\n    }\n  }\n`;\n\nconst UPDATE_POST_MUTATION = gql`\n  mutation UPDATE_POST_MUTATION(\n    $userId: String!\n    $postId: String!\n    $title: String!\n    $content: String!\n  ) {\n    updatePost(\n      userId: $userId\n      postId: $postId\n      title: $title\n      content: $content\n      ) {\n        id\n        title\n        userId\n        content\n        createdDate\n    }\n  }\n`;\n\n// const Post = props => (\n//   <Query query={ALL_POSTS_QUERY}>\n//     {({ data: { posts }, loading: loadingQuery }) => {\n//       console.log('query PostList posts: ', posts);\n//       if (loadingQuery)\n//         return (\n//           <div>\n//             <p>Загрузка...</p>\n//             <Icon loading name=\"spinner\" />\n//           </div>\n//         );\n//       if (!posts) {\n//         return <p>Постов нет</p>;\n//       }\n//       // console.log('const PostList: props:', props);\n//       return (\n//         <RowDiv>\n//           <div>\n//             <Segment.Group>\n//               <Segment>\n//               <ItemsList>\n//                 {data.posts.map(post => (\n//                   <PostBlock postItem={postItem} key={post.id} />\n//                 ))}\n//               </ItemsList>\n//                 <CreateFormCategoryTP />\n//               </Segment>\n//             </Segment.Group>\n//           </div>\n//         </RowDiv>\n//       );\n//     }}\n//   </Query>\n// );\n\nconst Post = props => (\n  <Query query={POST_QUERY}\n    variables={{\n          id: props.id,\n        }}\n  >\n    {({ data, loading: loadingQuery }) => {\n      console.log('query Post data: ', data);\n      return (\n      loadingQuery ? (\n          <div>\n            <p>\n            Загрузка...\n            <i className=\"spinner icon\"></i>\n            {/* <Icon loading name=\"spinner\" /> */}\n            </p>\n          </div>\n        )\n        :\n        (\n          <RowDiv>\n          <div>\n            <Segment.Group>\n              <Segment>\n              <ItemsList>\n                  <PostBlock postItem={data.post} key={data.post.id} />\n              </ItemsList>\n                <CreateFormCategoryTP />\n              </Segment>\n            </Segment.Group>\n          </div>\n        </RowDiv>\n        )\n      );\n    }}\n  </Query>\n);\n\nclass PostBlock extends Component {\n  static propTypes = {\n    postItem: PropTypes.shape({\n      id: PropTypes.string,\n      userId: PropTypes.string,\n      title: PropTypes.string,\n      content: PropTypes.string,\n      createdDate: PropTypes.string,\n    }).isRequired,\n  };\n\n  state = {\n    postItem: this.props.postItem,\n    // showCreate: '',\n    readOnly: true,\n    showEdit: '',\n  };\n\n  enableEdit = val => {\n    console.log('PostBlock enableEdit');\n    if (val === '1') {\n      this.setState({\n        showEdit: '1',\n        readOnly: false,\n      });\n    } else {\n      this.setState({\n        showEdit: '',\n        readOnly: true,\n        postItem: this.props.postItem,\n      });\n    }\n  };\n\n  handleChange = (e, data) => {\n    const { name, type, value } = e.target;\n    // console.log(`handleChange: e: `, e);\n    console.log(`handleChange: data: `, data);\n    console.log(\n      `handleChange: name: ${name}, type: ${type}, value: ${value}, data.checked: ${\n        data.checked\n      }, data.name: ${data.name}`\n    );\n\n    let val = value;\n    let nam = name;\n\n    if (data.name === 'isActive') {\n      val = data.checked;\n      nam = data.name;\n    }\n\n    const { postItem } = this.state;\n    postItem[nam] = val;\n    this.setState({ postItem });\n  };\n\n  updatePostItem = async updatePost => {\n    // console.log('updatePostItem e: ', e);\n    // console.log('PostList updatePostItem this.state: ', this.state);\n    const { postItem } = this.state;\n    console.log(\n      'PostList updatePostItem this.state.postItem: ',\n      postItem\n    );\n    const res = await updatePost({\n      userId: postItem.userId,\n      postId: postItem.postId,\n      title: postItem.title,\n      content: postItem.content,\n      });\n    console.log('updatePostItem UPDATED!!!! res: ', res);\n    this.setState({\n      postItem: this.props.postItem,\n      // postItem: {\n      //   userId:\n      //   title: '',\n      //   content: '',\n      //   createdDate: '',\n      // },\n      showEdit: '',\n      readOnly: true,\n    });\n  };\n\n  render() {\n    console.log('PostBlock render -> props', this.props);\n    console.log('PostBlock render -> state', this.state);\n    const {\n      postItem,\n      // showCreate,\n      readOnly,\n      showEdit,\n    } = this.state;\n    console.log('PostBlock render -> state.postItem', postItem);\n    return (\n      <Mutation\n        mutation={UPDATE_POST_MUTATION}\n        variables={\n          postItem\n          // {postItem: this.state.postItem,categoryTaxPayerId: this.props.postItem.id,}\n        }\n        refetchQueries={() => ['ALL_POSTS_QUERY']}\n      >\n        {({\n          updatePost, loading: loadingUpdate, error: errorUpdate }\n        ) => (\n          <Table.Row>\n            <Table.Cell>\n              <Form.Input\n                fluid\n                name=\"title\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                defaultValue={postItem.title}\n                onChange={this.handleChange}\n                // width={required\n              />\n            </Table.Cell>\n            <Table.Cell>\n              <Form.Input\n                fluid\n                name=\"userId\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                // defaultValue={postItem.userId}\n                // value={readOnly ? postItem.userId : categoryTP.userId}\n                defaultValue={postItem.userId}\n                onChange={this.handleChange}\n                // width={8}\n                required\n              />\n            </Table.Cell>\n            <Table.Cell>\n              <Form.Input\n                fluid\n                name=\"createdDate\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                defaultValue={postItem.createdDate}\n                onChange={this.handleChange}\n                // width={8}\n                required\n              />\n            </Table.Cell>\n            <Table.Cell>\n              <Form.Input\n                fluid\n                name=\"content\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                defaultValue={postItem.content}\n                onChange={this.handleChange}\n                // width={8}\n                required\n              />\n            </Table.Cell>\n\n            {showEdit === '' ? (\n              <Table.Cell collapsing colSpan=\"2\">\n                <Button\n                  // TODO tooltip\n                  icon\n                  size=\"large\"\n                  onClick={() => this.enableEdit('1')}\n                >\n                  <Icon name=\"edit outline\" />\n                </Button>\n                <Button icon size=\"large\">\n                  <Icon name=\"trash alternate outline\" />\n                </Button>\n              </Table.Cell>\n            ) : (\n              <Table.Cell collapsing colSpan=\"2\">\n                <Button\n                  onClick={() => this.updatePostItem(updatePost)}\n                  >\n                  Обнов{loadingUpdate ? 'ление' : 'ить'}\n                </Button>\n                <Button onClick={() => this.enableEdit('')}>Отмена</Button>\n              </Table.Cell>\n            )}\n          </Table.Row>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}