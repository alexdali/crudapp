{"ast":null,"code":"import withApollo from 'next-with-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport { endpoint, prodEndpoint } from '../config'; //import { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION } from '../components/Cart';\n//const createClient = new ApolloClient({\n\nfunction createClient() {\n  return new ApolloClient({\n    link: ApolloLink.from([onError(function (_ref) {\n      var graphQLErrors = _ref.graphQLErrors,\n          networkError = _ref.networkError;\n      if (graphQLErrors) graphQLErrors.forEach(function (_ref2) {\n        var message = _ref2.message,\n            locations = _ref2.locations,\n            path = _ref2.path;\n        return console.log(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n      });\n      if (networkError) console.log(\"[Network error]: \".concat(networkError));\n    }), new HttpLink({\n      uri: endpoint,\n      credentials: 'include'\n    })]),\n    cache: new InMemoryCache()\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["/media/n2_3TB/EDU/GraphQL/crudapp/frontend/lib/withData.js"],"names":["withApollo","ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","endpoint","prodEndpoint","createClient","link","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","uri","credentials","cache"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC,C,CACA;AAEA;;AACA,SAASC,YAAT,GAAwB;AACpB,SAAO,IAAIP,YAAJ,CAAiB;AAC1BQ,IAAAA,IAAI,EAAEJ,UAAU,CAACK,IAAX,CAAgB,CACpBN,OAAO,CAAC,gBAAqC;AAAA,UAAlCO,aAAkC,QAAlCA,aAAkC;AAAA,UAAnBC,YAAmB,QAAnBA,YAAmB;AAC3C,UAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB;AAAA,YAAGC,OAAH,SAAGA,OAAH;AAAA,YAAYC,SAAZ,SAAYA,SAAZ;AAAA,YAAuBC,IAAvB,SAAuBA,IAAvB;AAAA,eACpBC,OAAO,CAACC,GAAR,qCAC+BJ,OAD/B,yBACqDC,SADrD,qBACyEC,IADzE,EADoB;AAAA,OAAtB;AAKF,UAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,4BAAgCN,YAAhC;AACnB,KARM,CADa,EAUpB,IAAIT,QAAJ,CAAa;AACXgB,MAAAA,GAAG,EAAEb,QADM;AAEXc,MAAAA,WAAW,EAAE;AAFF,KAAb,CAVoB,CAAhB,CADoB;AAgB1BC,IAAAA,KAAK,EAAE,IAAInB,aAAJ;AAhBmB,GAAjB,CAAP;AAkBH;;AACD,eAAeF,UAAU,CAACQ,YAAD,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { onError } from 'apollo-link-error';\r\nimport { ApolloLink } from 'apollo-link';\r\nimport { endpoint, prodEndpoint } from '../config';\r\n//import { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION } from '../components/Cart';\r\n\r\n//const createClient = new ApolloClient({\r\nfunction createClient() {\r\n    return new ApolloClient({\r\n  link: ApolloLink.from([\r\n    onError(({ graphQLErrors, networkError }) => {\r\n      if (graphQLErrors)\r\n        graphQLErrors.forEach(({ message, locations, path }) =>\r\n          console.log(\r\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\r\n          ),\r\n        );\r\n      if (networkError) console.log(`[Network error]: ${networkError}`);\r\n    }),\r\n    new HttpLink({\r\n      uri: endpoint,\r\n      credentials: 'include'\r\n    })\r\n  ]),\r\n  cache: new InMemoryCache()\r\n});\r\n}\r\nexport default withApollo(createClient);\r\n"]},"metadata":{},"sourceType":"module"}