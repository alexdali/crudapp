{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/media/n2_3TB/EDU/GraphQL/crudapp/frontend/components/Post.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_POST_MUTATION(\\n    $userId: String!\\n    $postId: String!\\n    $title: String!\\n    $content: String!\\n  ) {\\n    updatePost(\\n      userId: $userId\\n      postId: $postId\\n      title: $title\\n      content: $content\\n      ) {\\n        id\\n        title\\n        userId\\n        content\\n        createdDate\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CREATE_POST_MUTATION(\\n    $userId: String!\\n    $title: String!\\n    $content: String!\\n  ) {\\n    createPost(\\n      userId: $userId\\n      title: $title\\n      content: $content\\n      ) {\\n        id\\n        title\\n        userId\\n        content\\n        createdDate\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query POST_QUERY(\\n    $id: String!\\n  ) {\\n    post {\\n      id\\n      title\\n      userId\\n      content\\n      createdDate\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { Mutation, Query, ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport { Header, Segment, Button, Icon, Table, Form } from 'semantic-ui-react';\nimport styled from 'styled-components'; //import NProgress from 'nprogress';\n//import CreateFormCategoryTP from './CreateFormCategoryTP';\n\nimport { ALL_POSTS_QUERY } from './PostList'; // import Error from './ErrorMessage';\n\nvar RowDiv = styled.div.withConfig({\n  displayName: \"Post__RowDiv\",\n  componentId: \"sc-1g58j7m-0\"\n})([\"margin:52px 0px;padding:30px 10px;border:1px solid rgba(34,36,38,0.15);border-radius:0.28571429rem;box-shadow:0 1px 2px 0 rgba(34,36,38,0.15);.menu-account-info{font-family:'Montserrat Alternates','Roboto','Open Sans',sans-serif,'Arial';}.segment.segment-bottom{display:flex;justify-content:space-between;}\"]);\nvar FormTab = styled.div.withConfig({\n  displayName: \"Post__FormTab\",\n  componentId: \"sc-1g58j7m-1\"\n})([\"form{> div.inline.fields.radio-buttons{border:1px solid rgba(34,36,38,0.15);padding:1em 1em;}div.fields.form-group-submit{display:\", \";}div.fields.form-group-edit{display:\", \";}}\"], function (props) {\n  return props.submitShow;\n}, function (props) {\n  return props.editShow;\n});\nvar POST_QUERY = gql(_templateObject());\nvar CREATE_POST_MUTATION = gql(_templateObject2());\nvar UPDATE_POST_MUTATION = gql(_templateObject3());\nvar ItemsList = styled.div.withConfig({\n  displayName: \"Post__ItemsList\",\n  componentId: \"sc-1g58j7m-2\"\n})([\"display:block;max-width:\", \";margin:2.5rem 3rem;padding:0 4em;@media (max-width:700px){margin:2.5rem 1rem;}\"], function (props) {\n  return props.theme.maxWidth;\n}); // const Post = props => (\n//   <Query query={ALL_POSTS_QUERY}>\n//     {({ data: { posts }, loading: loadingQuery }) => {\n//       console.log('query PostList posts: ', posts);\n//       if (loadingQuery)\n//         return (\n//           <div>\n//             <p>Загрузка...</p>\n//             <Icon loading name=\"spinner\" />\n//           </div>\n//         );\n//       if (!posts) {\n//         return <p>Постов нет</p>;\n//       }\n//       // console.log('const PostList: props:', props);\n//       return (\n//         <RowDiv>\n//           <div>\n//             <Segment.Group>\n//               <Segment>\n//               <ItemsList>\n//                 {data.posts.map(post => (\n//                   <PostBlock postItem={postItem} key={post.id} />\n//                 ))}\n//               </ItemsList>\n//                 <CreateFormCategoryTP />\n//               </Segment>\n//             </Segment.Group>\n//           </div>\n//         </RowDiv>\n//       );\n//     }}\n//   </Query>\n// );\n\nvar Post = function Post(props) {\n  console.log('const Post props: ', props);\n  return __jsx(Query, {\n    query: POST_QUERY,\n    variables: {\n      id: props.id\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, function (_ref) {\n    var data = _ref.data,\n        loadingQuery = _ref.loading;\n    console.log('query Post data: ', data);\n    return loadingQuery ? __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\", __jsx(\"i\", {\n      className: \"spinner icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }))) : __jsx(RowDiv, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, __jsx(Segment.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, __jsx(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, __jsx(ItemsList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, __jsx(PostBlock, {\n      postItem: data.post,\n      key: data.post.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }))))));\n  });\n};\n\nvar PostBlock =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostBlock, _Component);\n\n  function PostBlock() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostBlock);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostBlock)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      postItem: _this.props.postItem,\n      // showCreate: '',\n      readOnly: true,\n      showEdit: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"enableEdit\", function (val) {\n      console.log('PostBlock enableEdit');\n\n      if (val === '1') {\n        _this.setState({\n          showEdit: '1',\n          readOnly: false\n        });\n      } else {\n        _this.setState({\n          showEdit: '',\n          readOnly: true,\n          postItem: _this.props.postItem\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e, data) {\n      var _e$target = e.target,\n          name = _e$target.name,\n          type = _e$target.type,\n          value = _e$target.value; // console.log(`handleChange: e: `, e);\n\n      console.log(\"handleChange: data: \", data);\n      console.log(\"handleChange: name: \".concat(name, \", type: \").concat(type, \", value: \").concat(value, \", data.checked: \").concat(data.checked, \", data.name: \").concat(data.name));\n      var val = value;\n      var nam = name;\n\n      if (data.name === 'isActive') {\n        val = data.checked;\n        nam = data.name;\n      }\n\n      var postItem = _this.state.postItem;\n      postItem[nam] = val;\n\n      _this.setState({\n        postItem: postItem\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updatePostItem\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(updatePost) {\n        var postItem, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // console.log('updatePostItem e: ', e);\n                // console.log('PostList updatePostItem this.state: ', this.state);\n                postItem = _this.state.postItem;\n                console.log('PostList updatePostItem this.state.postItem: ', postItem);\n                _context.next = 4;\n                return updatePost({\n                  userId: postItem.userId,\n                  postId: postItem.postId,\n                  title: postItem.title,\n                  content: postItem.content\n                });\n\n              case 4:\n                res = _context.sent;\n                console.log('updatePostItem UPDATED!!!! res: ', res);\n\n                _this.setState({\n                  postItem: _this.props.postItem,\n                  // postItem: {\n                  //   userId:\n                  //   title: '',\n                  //   content: '',\n                  //   createdDate: '',\n                  // },\n                  showEdit: '',\n                  readOnly: true\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(PostBlock, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('PostBlock render -> props', this.props);\n      console.log('PostBlock render -> state', this.state);\n      var _this$state = this.state,\n          postItem = _this$state.postItem,\n          readOnly = _this$state.readOnly,\n          showEdit = _this$state.showEdit;\n      console.log('PostBlock render -> state.postItem', postItem);\n      return __jsx(Mutation, {\n        mutation: UPDATE_POST_MUTATION,\n        variables: postItem // {postItem: this.state.postItem,categoryTaxPayerId: this.props.postItem.id,}\n        ,\n        refetchQueries: function refetchQueries() {\n          return ['ALL_POSTS_QUERY'];\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, function (_ref3) {\n        var updatePost = _ref3.updatePost,\n            loadingUpdate = _ref3.loading,\n            errorUpdate = _ref3.error;\n        return __jsx(Table.Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301\n          },\n          __self: this\n        }, __jsx(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 302\n          },\n          __self: this\n        }, __jsx(Form.Input, {\n          fluid: true,\n          name: \"title\",\n          readOnly: readOnly,\n          disabled: loadingUpdate,\n          loading: loadingUpdate,\n          defaultValue: postItem.title,\n          onChange: _this2.handleChange // width={required\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303\n          },\n          __self: this\n        })), __jsx(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314\n          },\n          __self: this\n        }, __jsx(Form.Input, {\n          fluid: true,\n          name: \"userId\",\n          readOnly: readOnly,\n          disabled: loadingUpdate,\n          loading: loadingUpdate // defaultValue={postItem.userId}\n          // value={readOnly ? postItem.userId : categoryTP.userId}\n          ,\n          defaultValue: postItem.userId,\n          onChange: _this2.handleChange // width={8}\n          ,\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315\n          },\n          __self: this\n        })), __jsx(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329\n          },\n          __self: this\n        }, __jsx(Form.Input, {\n          fluid: true,\n          name: \"createdDate\",\n          readOnly: readOnly,\n          disabled: loadingUpdate,\n          loading: loadingUpdate,\n          defaultValue: postItem.createdDate,\n          onChange: _this2.handleChange // width={8}\n          ,\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330\n          },\n          __self: this\n        })), __jsx(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342\n          },\n          __self: this\n        }, __jsx(Form.Input, {\n          fluid: true,\n          name: \"content\",\n          readOnly: readOnly,\n          disabled: loadingUpdate,\n          loading: loadingUpdate,\n          defaultValue: postItem.content,\n          onChange: _this2.handleChange // width={8}\n          ,\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 343\n          },\n          __self: this\n        })), showEdit === '' ? __jsx(Table.Cell, {\n          collapsing: true,\n          colSpan: \"2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 357\n          },\n          __self: this\n        }, __jsx(Button // TODO tooltip\n        , {\n          icon: true,\n          size: \"large\",\n          onClick: function onClick() {\n            return _this2.enableEdit('1');\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 358\n          },\n          __self: this\n        }, __jsx(Icon, {\n          name: \"edit outline\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364\n          },\n          __self: this\n        })), __jsx(Button, {\n          icon: true,\n          size: \"large\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 366\n          },\n          __self: this\n        }, __jsx(Icon, {\n          name: \"trash alternate outline\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 367\n          },\n          __self: this\n        }))) : __jsx(Table.Cell, {\n          collapsing: true,\n          colSpan: \"2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371\n          },\n          __self: this\n        }, __jsx(Button, {\n          onClick: function onClick() {\n            return _this2.updatePostItem(updatePost);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372\n          },\n          __self: this\n        }, \"\\u041E\\u0431\\u043D\\u043E\\u0432\", loadingUpdate ? 'ление' : 'ить'), __jsx(Button, {\n          onClick: function onClick() {\n            return _this2.enableEdit('');\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 377\n          },\n          __self: this\n        }, \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\")));\n      });\n    }\n  }]);\n\n  return PostBlock;\n}(Component);\n\n_defineProperty(PostBlock, \"propTypes\", {\n  postItem: PropTypes.shape({\n    id: PropTypes.string,\n    userId: PropTypes.string,\n    title: PropTypes.string,\n    content: PropTypes.string,\n    createdDate: PropTypes.string\n  }).isRequired\n});\n\nexport default Post;","map":{"version":3,"sources":["/media/n2_3TB/EDU/GraphQL/crudapp/frontend/components/Post.js"],"names":["React","Component","Mutation","Query","ApolloConsumer","gql","PropTypes","Header","Segment","Button","Icon","Table","Form","styled","ALL_POSTS_QUERY","RowDiv","div","FormTab","props","submitShow","editShow","POST_QUERY","CREATE_POST_MUTATION","UPDATE_POST_MUTATION","ItemsList","theme","maxWidth","Post","console","log","id","data","loadingQuery","loading","post","PostBlock","postItem","readOnly","showEdit","val","setState","e","target","name","type","value","checked","nam","state","updatePost","userId","postId","title","content","res","loadingUpdate","errorUpdate","error","handleChange","createdDate","enableEdit","updatePostItem","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Mutation, Query, ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport { Header, Segment, Button, Icon, Table, Form,\n} from 'semantic-ui-react';\nimport styled from 'styled-components';\n//import NProgress from 'nprogress';\n//import CreateFormCategoryTP from './CreateFormCategoryTP';\nimport { ALL_POSTS_QUERY } from './PostList';\n// import Error from './ErrorMessage';\n\nconst RowDiv = styled.div`\n  margin: 52px 0px;\n  padding: 30px 10px;\n  border: 1px solid rgba(34, 36, 38, 0.15);\n  border-radius: 0.28571429rem;\n  box-shadow: 0 1px 2px 0 rgba(34, 36, 38, 0.15);\n  .menu-account-info {\n    font-family: 'Montserrat Alternates', 'Roboto', 'Open Sans', sans-serif,\n      'Arial';\n  }\n  .segment.segment-bottom {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst FormTab = styled.div`\n  form {\n    > div.inline.fields.radio-buttons {\n      /* margin: 0 0 1em; */\n      border: 1px solid rgba(34, 36, 38, 0.15);\n      padding: 1em 1em;\n    }\n    /* div.radio-buttons {\n      padding: 10px 0;\n    } */\n    div.fields.form-group-submit {\n      /* display: none; */\n      display: ${props => props.submitShow};\n    }\n    div.fields.form-group-edit {\n      /* display: flex; */\n      display: ${props => props.editShow};\n    }\n  }\n`;\n\nconst POST_QUERY = gql`\n  query POST_QUERY(\n    $id: String!\n  ) {\n    post {\n      id\n      title\n      userId\n      content\n      createdDate\n    }\n  }\n`;\n\nconst CREATE_POST_MUTATION = gql`\n  mutation CREATE_POST_MUTATION(\n    $userId: String!\n    $title: String!\n    $content: String!\n  ) {\n    createPost(\n      userId: $userId\n      title: $title\n      content: $content\n      ) {\n        id\n        title\n        userId\n        content\n        createdDate\n    }\n  }\n`;\n\nconst UPDATE_POST_MUTATION = gql`\n  mutation UPDATE_POST_MUTATION(\n    $userId: String!\n    $postId: String!\n    $title: String!\n    $content: String!\n  ) {\n    updatePost(\n      userId: $userId\n      postId: $postId\n      title: $title\n      content: $content\n      ) {\n        id\n        title\n        userId\n        content\n        createdDate\n    }\n  }\n`;\n\nconst ItemsList = styled.div`\n  /* display: grid; */\n  display: block;\n  /* grid-template-columns: 1fr 1fr;\n  grid-gap: 60px; */\n  max-width: ${props => props.theme.maxWidth};\n  margin: 2.5rem 3rem;\n  padding: 0 4em;\n  @media (max-width: 700px) {\n    margin: 2.5rem 1rem;\n  }\n`;\n\n// const Post = props => (\n//   <Query query={ALL_POSTS_QUERY}>\n//     {({ data: { posts }, loading: loadingQuery }) => {\n//       console.log('query PostList posts: ', posts);\n//       if (loadingQuery)\n//         return (\n//           <div>\n//             <p>Загрузка...</p>\n//             <Icon loading name=\"spinner\" />\n//           </div>\n//         );\n//       if (!posts) {\n//         return <p>Постов нет</p>;\n//       }\n//       // console.log('const PostList: props:', props);\n//       return (\n//         <RowDiv>\n//           <div>\n//             <Segment.Group>\n//               <Segment>\n//               <ItemsList>\n//                 {data.posts.map(post => (\n//                   <PostBlock postItem={postItem} key={post.id} />\n//                 ))}\n//               </ItemsList>\n//                 <CreateFormCategoryTP />\n//               </Segment>\n//             </Segment.Group>\n//           </div>\n//         </RowDiv>\n//       );\n//     }}\n//   </Query>\n// );\n\nconst Post = props => {\n  console.log('const Post props: ', props);\n  return (\n  <Query query={POST_QUERY}\n    variables={{\n          id: props.id,\n        }}\n  >\n    {({ data, loading: loadingQuery }) => {\n      console.log('query Post data: ', data);\n      return (\n      loadingQuery ? (\n          <div>\n            <p>\n            Загрузка...\n            <i className=\"spinner icon\"></i>\n            {/* <Icon loading name=\"spinner\" /> */}\n            </p>\n          </div>\n        )\n        :\n        (\n          <RowDiv>\n          <div>\n            <Segment.Group>\n              <Segment>\n              <ItemsList>\n                  <PostBlock postItem={data.post} key={data.post.id} />\n              </ItemsList>\n                {/* <CreateFormCategoryTP /> */}\n              </Segment>\n            </Segment.Group>\n          </div>\n        </RowDiv>\n        )\n      );\n    }}\n  </Query>\n  )};\n\nclass PostBlock extends Component {\n  static propTypes = {\n    postItem: PropTypes.shape({\n      id: PropTypes.string,\n      userId: PropTypes.string,\n      title: PropTypes.string,\n      content: PropTypes.string,\n      createdDate: PropTypes.string,\n    }).isRequired,\n  };\n\n  state = {\n    postItem: this.props.postItem,\n    // showCreate: '',\n    readOnly: true,\n    showEdit: '',\n  };\n\n  enableEdit = val => {\n    console.log('PostBlock enableEdit');\n    if (val === '1') {\n      this.setState({\n        showEdit: '1',\n        readOnly: false,\n      });\n    } else {\n      this.setState({\n        showEdit: '',\n        readOnly: true,\n        postItem: this.props.postItem,\n      });\n    }\n  };\n\n  handleChange = (e, data) => {\n    const { name, type, value } = e.target;\n    // console.log(`handleChange: e: `, e);\n    console.log(`handleChange: data: `, data);\n    console.log(\n      `handleChange: name: ${name}, type: ${type}, value: ${value}, data.checked: ${\n        data.checked\n      }, data.name: ${data.name}`\n    );\n\n    let val = value;\n    let nam = name;\n\n    if (data.name === 'isActive') {\n      val = data.checked;\n      nam = data.name;\n    }\n\n    const { postItem } = this.state;\n    postItem[nam] = val;\n    this.setState({ postItem });\n  };\n\n  updatePostItem = async updatePost => {\n    // console.log('updatePostItem e: ', e);\n    // console.log('PostList updatePostItem this.state: ', this.state);\n    const { postItem } = this.state;\n    console.log(\n      'PostList updatePostItem this.state.postItem: ',\n      postItem\n    );\n    const res = await updatePost({\n      userId: postItem.userId,\n      postId: postItem.postId,\n      title: postItem.title,\n      content: postItem.content,\n      });\n    console.log('updatePostItem UPDATED!!!! res: ', res);\n    this.setState({\n      postItem: this.props.postItem,\n      // postItem: {\n      //   userId:\n      //   title: '',\n      //   content: '',\n      //   createdDate: '',\n      // },\n      showEdit: '',\n      readOnly: true,\n    });\n  };\n\n  render() {\n    console.log('PostBlock render -> props', this.props);\n    console.log('PostBlock render -> state', this.state);\n    const {\n      postItem,\n      // showCreate,\n      readOnly,\n      showEdit,\n    } = this.state;\n    console.log('PostBlock render -> state.postItem', postItem);\n    return (\n      <Mutation\n        mutation={UPDATE_POST_MUTATION}\n        variables={\n          postItem\n          // {postItem: this.state.postItem,categoryTaxPayerId: this.props.postItem.id,}\n        }\n        refetchQueries={() => ['ALL_POSTS_QUERY']}\n      >\n        {({\n          updatePost, loading: loadingUpdate, error: errorUpdate }\n        ) => (\n          <Table.Row>\n            <Table.Cell>\n              <Form.Input\n                fluid\n                name=\"title\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                defaultValue={postItem.title}\n                onChange={this.handleChange}\n                // width={required\n              />\n            </Table.Cell>\n            <Table.Cell>\n              <Form.Input\n                fluid\n                name=\"userId\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                // defaultValue={postItem.userId}\n                // value={readOnly ? postItem.userId : categoryTP.userId}\n                defaultValue={postItem.userId}\n                onChange={this.handleChange}\n                // width={8}\n                required\n              />\n            </Table.Cell>\n            <Table.Cell>\n              <Form.Input\n                fluid\n                name=\"createdDate\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                defaultValue={postItem.createdDate}\n                onChange={this.handleChange}\n                // width={8}\n                required\n              />\n            </Table.Cell>\n            <Table.Cell>\n              <Form.Input\n                fluid\n                name=\"content\"\n                readOnly={readOnly}\n                disabled={loadingUpdate}\n                loading={loadingUpdate}\n                defaultValue={postItem.content}\n                onChange={this.handleChange}\n                // width={8}\n                required\n              />\n            </Table.Cell>\n\n            {showEdit === '' ? (\n              <Table.Cell collapsing colSpan=\"2\">\n                <Button\n                  // TODO tooltip\n                  icon\n                  size=\"large\"\n                  onClick={() => this.enableEdit('1')}\n                >\n                  <Icon name=\"edit outline\" />\n                </Button>\n                <Button icon size=\"large\">\n                  <Icon name=\"trash alternate outline\" />\n                </Button>\n              </Table.Cell>\n            ) : (\n              <Table.Cell collapsing colSpan=\"2\">\n                <Button\n                  onClick={() => this.updatePostItem(updatePost)}\n                  >\n                  Обнов{loadingUpdate ? 'ление' : 'ить'}\n                </Button>\n                <Button onClick={() => this.enableEdit('')}>Отмена</Button>\n              </Table.Cell>\n            )}\n          </Table.Row>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}