{"ast":null,"code":"var _jsxFileName = \"/media/n2_3TB/EDU/GraphQL/crudapp/frontend/components/PostList.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Mutation, Query, ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport { Header, Segment, Button, Icon, Form } from 'semantic-ui-react';\nimport styled from 'styled-components'; //import NProgress from 'nprogress';\n\nimport CreateFormCategoryTP from './CreateFormCategoryTP';\nimport PostCard from './PostCard'; // import Error from './ErrorMessage';\n\nconst RowDiv = styled.div.withConfig({\n  displayName: \"PostList__RowDiv\",\n  componentId: \"j2ms20-0\"\n})([\"margin:52px 0px;padding:30px 10px;border:1px solid rgba(34,36,38,0.15);border-radius:0.28571429rem;box-shadow:0 1px 2px 0 rgba(34,36,38,0.15);.menu-account-info{font-family:'Montserrat Alternates','Roboto','Open Sans',sans-serif,'Arial';}.segment.segment-bottom{display:flex;justify-content:space-between;}\"]); // const FormTab = styled.div`\n//   form {\n//     > div.inline.fields.radio-buttons {\n//       /* margin: 0 0 1em; */\n//       border: 1px solid rgba(34, 36, 38, 0.15);\n//       padding: 1em 1em;\n//     }\n//     /* div.radio-buttons {\n//       padding: 10px 0;\n//     } */\n//     div.fields.form-group-submit {\n//       /* display: none; */\n//       display: ${props => props.submitShow};\n//     }\n//     div.fields.form-group-edit {\n//       /* display: flex; */\n//       display: ${props => props.editShow};\n//     }\n//   }\n// `;\n\nconst ItemsList = styled.div.withConfig({\n  displayName: \"PostList__ItemsList\",\n  componentId: \"j2ms20-1\"\n})([\"display:block;max-width:\", \";margin:2.5rem 3rem;padding:0 4em;@media (max-width:700px){margin:2.5rem 1rem;}\"], props => props.theme.maxWidth); // const perScreen = 5;\n\nconst ALL_POSTS_QUERY = gql`\n  query ALL_POSTS_QUERY {\n    posts {\n      id\n      title\n      userId\n      content\n      createdDate\n    }\n  }\n`; // const UPDATE_POST_MUTATION = gql`\n//   mutation UPDATE_POST_MUTATION(\n//     $userId: String!\n//     $postId: String!\n//     $title: String!\n//     $content: String!\n//   ) {\n//     updatePost(\n//       userId: $userId\n//       postId: $postId\n//       title: $title\n//       content: $content)\n//       {\n//         id\n//         title\n//         userId\n//         content\n//         createdDate\n//     }\n//   }\n// `;\n\nconst PostList = props => __jsx(Query, {\n  query: ALL_POSTS_QUERY,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 99\n  },\n  __self: this\n}, ({\n  data: {\n    posts\n  },\n  loading: loadingQuery\n}) => {\n  console.log('query PostList posts: ', posts);\n  if (loadingQuery) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"), __jsx(Icon, {\n    loading: true,\n    name: \"spinner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }));\n\n  if (!posts) {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"\\u041F\\u043E\\u0441\\u0442\\u043E\\u0432 \\u043D\\u0435\\u0442\");\n  } // console.log('const PostList: props:', props);\n\n\n  return __jsx(RowDiv, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, __jsx(Segment.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, __jsx(Segment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, data.posts.map(post => __jsx(PostCard, {\n    postcard: post,\n    key: post.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }))))));\n});\n\nexport default PostList;","map":{"version":3,"sources":["/media/n2_3TB/EDU/GraphQL/crudapp/frontend/components/PostList.js"],"names":["React","Component","Mutation","Query","ApolloConsumer","gql","PropTypes","Header","Segment","Button","Icon","Form","styled","CreateFormCategoryTP","PostCard","RowDiv","div","ItemsList","props","theme","maxWidth","ALL_POSTS_QUERY","PostList","data","posts","loading","loadingQuery","console","log","map","post","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,cAA1B,QAAgD,cAAhD;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwCC,IAAxC,QAAoD,mBAApD;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AAEA,MAAMC,MAAM,GAAGH,MAAM,CAACI,GAAV;AAAA;AAAA;AAAA,0TAAZ,C,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGL,MAAM,CAACI,GAAV;AAAA;AAAA;AAAA,oHAKAE,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,QALrB,CAAf,C,CAaA;;AAEA,MAAMC,eAAe,GAAGhB,GAAI;;;;;;;;;;CAA5B,C,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMiB,QAAQ,GAAGJ,KAAK,IACpB,MAAC,KAAD;AAAO,EAAA,KAAK,EAAEG,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACG,CAAC;AAAEE,EAAAA,IAAI,EAAE;AAAEC,IAAAA;AAAF,GAAR;AAAmBC,EAAAA,OAAO,EAAEC;AAA5B,CAAD,KAAgD;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCJ,KAAtC;AACA,MAAIE,YAAJ,EACE,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DADF,EAEE,MAAC,IAAD;AAAM,IAAA,OAAO,MAAb;AAAc,IAAA,IAAI,EAAC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;;AAMF,MAAI,CAACF,KAAL,EAAY;AACV,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAAP;AACD,GAX8C,CAY/C;;;AACA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD,CAAS,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,CAACC,KAAL,CAAWK,GAAX,CAAeC,IAAI,IAClB,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAEA,IAApB;AAA0B,IAAA,GAAG,EAAEA,IAAI,CAACC,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF,CADF,CADF,CADF;AAcD,CA5BH,CADF;;AAiCA,eAAeT,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Mutation, Query, ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport { Header, Segment, Button, Icon, Form } from 'semantic-ui-react';\nimport styled from 'styled-components';\n//import NProgress from 'nprogress';\nimport CreateFormCategoryTP from './CreateFormCategoryTP';\nimport PostCard from './PostCard';\n// import Error from './ErrorMessage';\n\nconst RowDiv = styled.div`\n  margin: 52px 0px;\n  padding: 30px 10px;\n  border: 1px solid rgba(34, 36, 38, 0.15);\n  border-radius: 0.28571429rem;\n  box-shadow: 0 1px 2px 0 rgba(34, 36, 38, 0.15);\n  .menu-account-info {\n    font-family: 'Montserrat Alternates', 'Roboto', 'Open Sans', sans-serif,\n      'Arial';\n  }\n  .segment.segment-bottom {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\n// const FormTab = styled.div`\n//   form {\n//     > div.inline.fields.radio-buttons {\n//       /* margin: 0 0 1em; */\n//       border: 1px solid rgba(34, 36, 38, 0.15);\n//       padding: 1em 1em;\n//     }\n//     /* div.radio-buttons {\n//       padding: 10px 0;\n//     } */\n//     div.fields.form-group-submit {\n//       /* display: none; */\n//       display: ${props => props.submitShow};\n//     }\n//     div.fields.form-group-edit {\n//       /* display: flex; */\n//       display: ${props => props.editShow};\n//     }\n//   }\n// `;\n\nconst ItemsList = styled.div`\n  /* display: grid; */\n  display: block;\n  /* grid-template-columns: 1fr 1fr;\n  grid-gap: 60px; */\n  max-width: ${props => props.theme.maxWidth};\n  margin: 2.5rem 3rem;\n  padding: 0 4em;\n  @media (max-width: 700px) {\n    margin: 2.5rem 1rem;\n  }\n`;\n\n// const perScreen = 5;\n\nconst ALL_POSTS_QUERY = gql`\n  query ALL_POSTS_QUERY {\n    posts {\n      id\n      title\n      userId\n      content\n      createdDate\n    }\n  }\n`;\n\n// const UPDATE_POST_MUTATION = gql`\n//   mutation UPDATE_POST_MUTATION(\n//     $userId: String!\n//     $postId: String!\n//     $title: String!\n//     $content: String!\n//   ) {\n//     updatePost(\n//       userId: $userId\n//       postId: $postId\n//       title: $title\n//       content: $content)\n//       {\n//         id\n//         title\n//         userId\n//         content\n//         createdDate\n//     }\n//   }\n// `;\n\nconst PostList = props => (\n  <Query query={ALL_POSTS_QUERY}>\n    {({ data: { posts }, loading: loadingQuery }) => {\n      console.log('query PostList posts: ', posts);\n      if (loadingQuery)\n        return (\n          <div>\n            <p>Загрузка...</p>\n            <Icon loading name=\"spinner\" />\n          </div>\n        );\n      if (!posts) {\n        return <p>Постов нет</p>;\n      }\n      // console.log('const PostList: props:', props);\n      return (\n        <RowDiv>\n          <div>\n            <Segment.Group>\n              <Segment>\n                {data.posts.map(post => (\n                  <PostCard postcard={post} key={post.id} />\n                ))}\n                {/* <CreateFormCategoryTP /> */}\n              </Segment>\n            </Segment.Group>\n          </div>\n        </RowDiv>\n      );\n    }}\n  </Query>\n);\n\nexport default PostList"]},"metadata":{},"sourceType":"module"}