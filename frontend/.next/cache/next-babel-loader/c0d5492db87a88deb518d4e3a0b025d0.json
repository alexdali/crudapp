{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport withApollo from 'next-with-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink, createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { endpoint, prodEndpoint } from '../config'; //import { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION } from '../components/Cart';\n\nconst httpLink = createHttpLink({\n  uri: endpoint,\n  credentials: 'include'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  //const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: _objectSpread({}, headers)\n  };\n}); // const authLink = new ApolloLink((operation, forward) => {\n//   operation.setContext(({ headers }) => ({ headers: {\n//     //authorization: Meteor.userId(), // however you get your token\n//     ...headers\n//   }}));\n//   return forward(operation);\n// });\n//const createClient = new ApolloClient({\n\nfunction createClient({\n  headers\n}) {\n  return new ApolloClient({\n    //credentials: 'include',\n    link: ApolloLink.from([authLink, onError(({\n      graphQLErrors,\n      networkError\n    }) => {\n      if (graphQLErrors) graphQLErrors.forEach(({\n        message,\n        locations,\n        path\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }), httpLink // new HttpLink({\n    //   uri: endpoint,\n    //   credentials: 'include',\n    //  })\n    ]),\n    cache: new InMemoryCache()\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["/media/n2_3TB/EDU/GraphQL/crudapp/frontend/lib/withData.js"],"names":["withApollo","ApolloClient","InMemoryCache","onError","ApolloLink","HttpLink","createHttpLink","setContext","endpoint","prodEndpoint","httpLink","uri","credentials","authLink","_","headers","createClient","link","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","cache"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,kBAAzC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC,C,CACA;;AAEA,MAAMC,QAAQ,GAAGJ,cAAc,CAAC;AAC9BK,EAAAA,GAAG,EAAEH,QADyB;AAE9BI,EAAAA,WAAW,EAAE;AAFiB,CAAD,CAA/B;AAKA,MAAMC,QAAQ,GAAGN,UAAU,CAAC,CAACO,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA;AACA;AACA,SAAO;AACLA,IAAAA,OAAO,oBACFA,OADE;AADF,GAAP;AAMD,CAV0B,CAA3B,C,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAASC,YAAT,CAAsB;AAAED,EAAAA;AAAF,CAAtB,EAAmC;AAC/B,SAAO,IAAId,YAAJ,CAAiB;AACtB;AACJgB,IAAAA,IAAI,EAAEb,UAAU,CAACc,IAAX,CAAgB,CACpBL,QADoB,EAGpBV,OAAO,CAAC,CAAC;AAAEgB,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAD,KAAqC;AAC3C,UAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA;AAAtB,OAAD,KACpBC,OAAO,CAACC,GAAR,CACG,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD9E,CADF;AAKF,UAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,CAAa,oBAAmBN,YAAa,EAA7C;AACnB,KARM,CAHa,EAYpBV,QAZoB,CAapB;AACA;AACA;AACA;AAhBoB,KAAhB,CAFoB;AAoB1BiB,IAAAA,KAAK,EAAE,IAAIzB,aAAJ;AApBmB,GAAjB,CAAP;AAsBH;;AACD,eAAeF,UAAU,CAACgB,YAAD,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { onError } from 'apollo-link-error';\r\nimport { ApolloLink } from 'apollo-link';\r\nimport { HttpLink, createHttpLink } from 'apollo-link-http';\r\nimport { setContext } from 'apollo-link-context';\r\nimport { endpoint, prodEndpoint } from '../config';\r\n//import { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION } from '../components/Cart';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: endpoint,\r\n  credentials: 'include'\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  //const token = localStorage.getItem('token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      //authorization: token ? `Bearer ${token}` : \"\",\r\n    }\r\n  }\r\n});\r\n\r\n// const authLink = new ApolloLink((operation, forward) => {\r\n//   operation.setContext(({ headers }) => ({ headers: {\r\n//     //authorization: Meteor.userId(), // however you get your token\r\n//     ...headers\r\n//   }}));\r\n//   return forward(operation);\r\n// });\r\n\r\n//const createClient = new ApolloClient({\r\nfunction createClient({ headers }) {\r\n    return new ApolloClient({\r\n      //credentials: 'include',\r\n  link: ApolloLink.from([\r\n    authLink,\r\n\r\n    onError(({ graphQLErrors, networkError }) => {\r\n      if (graphQLErrors)\r\n        graphQLErrors.forEach(({ message, locations, path }) =>\r\n          console.log(\r\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\r\n          ),\r\n        );\r\n      if (networkError) console.log(`[Network error]: ${networkError}`);\r\n    }),\r\n    httpLink\r\n    // new HttpLink({\r\n    //   uri: endpoint,\r\n    //   credentials: 'include',\r\n    //  })\r\n  ]),\r\n  cache: new InMemoryCache()\r\n});\r\n}\r\nexport default withApollo(createClient);\r\n"]},"metadata":{},"sourceType":"module"}